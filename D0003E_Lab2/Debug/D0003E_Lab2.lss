
D0003E_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000006d8  0000076c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001142  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b29  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000625  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000881  00000000  00000000  000032bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 ed       	ldi	r30, 0xD8	; 216
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  92:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:
mutex mutexPrime = MUTEX_INIT;

void LCDInit(void) {
	
	//Set Lowpower Waveform, no frame interrupt, no blanking. LCD Enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	//drive time 300 microseconds, contrast control voltage 3.35 V.
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	//external asynchronous clock source, 1/3 bias, 1/4 duty cycle, 25 segments.
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
  a6:	87 eb       	ldi	r24, 0xB7	; 183
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//prescaler setting N=16, clock divider setting D=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  b2:	08 95       	ret

000000b4 <writeChar>:

}

void writeChar(char ch, int pos)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	64 97       	sbiw	r28, 0x14	; 20
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t *lcdaddr = (uint8_t *) 0xec;	//The Address to the first position on the LCD.
	uint8_t mask;							//Mask to get only the nibble of a value.
	uint8_t nibbleNumber = 0x0;				//Nibble the number that is sent to the LCD.
	
	//SCC Table with the numbers from 0 to 9.
	uint16_t sccTable[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  c8:	94 e1       	ldi	r25, 0x14	; 20
  ca:	e4 e0       	ldi	r30, 0x04	; 4
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	9a 95       	dec	r25
  d8:	e1 f7       	brne	.-8      	; 0xd2 <writeChar+0x1e>
	
	// Check if position is outside or not.
	if (pos < 0 || pos > 5) {
  da:	66 30       	cpi	r22, 0x06	; 6
  dc:	71 05       	cpc	r23, r1
  de:	68 f5       	brcc	.+90     	; 0x13a <writeChar+0x86>
	uint16_t number = 0x0;	// The number to print.
	
	// Check if it is a 0 to 9.
	if (ch >= '0' || ch <= '9')
	{
		number = sccTable[ch - '0'];	//Get the number out of the array.
  e0:	e8 2f       	mov	r30, r24
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	f0 97       	sbiw	r30, 0x30	; 48
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	21 81       	ldd	r18, Z+1	; 0x01
  f0:	32 81       	ldd	r19, Z+2	; 0x02
	}
	
	lcdaddr += pos >> 1;	//Point to the right position. Divide by 2 you can say.
  f2:	fb 01       	movw	r30, r22
  f4:	f5 95       	asr	r31
  f6:	e7 95       	ror	r30
  f8:	e4 51       	subi	r30, 0x14	; 20
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
	
	//Check if it is odd or even position.
	if (pos % 2 == 0)
  fc:	db 01       	movw	r26, r22
  fe:	a1 70       	andi	r26, 0x01	; 1
 100:	bb 27       	eor	r27, r27
 102:	60 ff       	sbrs	r22, 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <writeChar+0x56>
	{
		mask = 0xf0;
	}
	else
	{
		mask = 0x0f;
 106:	6f e0       	ldi	r22, 0x0F	; 15
 108:	01 c0       	rjmp	.+2      	; 0x10c <writeChar+0x58>
	lcdaddr += pos >> 1;	//Point to the right position. Divide by 2 you can say.
	
	//Check if it is odd or even position.
	if (pos % 2 == 0)
	{
		mask = 0xf0;
 10a:	60 ef       	ldi	r22, 0xF0	; 240
 10c:	af 01       	movw	r20, r30
 10e:	4c 5e       	subi	r20, 0xEC	; 236
 110:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//Will place out the nibbles on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
	{
		//Masking the smallest byte.
		nibbleNumber = number & 0xf;
 112:	82 2f       	mov	r24, r18
 114:	8f 70       	andi	r24, 0x0F	; 15
		number = number >> 4;
 116:	32 95       	swap	r19
 118:	22 95       	swap	r18
 11a:	2f 70       	andi	r18, 0x0F	; 15
 11c:	23 27       	eor	r18, r19
 11e:	3f 70       	andi	r19, 0x0F	; 15
 120:	23 27       	eor	r18, r19
		
		if(pos % 2 != 0)	//Check position.
 122:	10 97       	sbiw	r26, 0x00	; 0
 124:	11 f0       	breq	.+4      	; 0x12a <writeChar+0x76>
		{
			nibbleNumber = nibbleNumber << 4;	//Shift the nibble to the right pos.
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
		}
		
		*lcdaddr = (*lcdaddr & mask) | nibbleNumber;	//Send the nibble.
 12a:	90 81       	ld	r25, Z
 12c:	96 23       	and	r25, r22
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
		lcdaddr += 5;
 132:	35 96       	adiw	r30, 0x05	; 5
	{
		mask = 0x0f;
	}
	
	//Will place out the nibbles on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
 134:	4e 17       	cp	r20, r30
 136:	5f 07       	cpc	r21, r31
 138:	61 f7       	brne	.-40     	; 0x112 <writeChar+0x5e>
		}
		
		*lcdaddr = (*lcdaddr & mask) | nibbleNumber;	//Send the nibble.
		lcdaddr += 5;
	}
}
 13a:	64 96       	adiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <is_prime>:

//Calculates the prime.
bool is_prime(long i)
{
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	6b 01       	movw	r12, r22
 15a:	7c 01       	movw	r14, r24
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	c8 16       	cp	r12, r24
 160:	d1 04       	cpc	r13, r1
 162:	e1 04       	cpc	r14, r1
 164:	f1 04       	cpc	r15, r1
 166:	74 f1       	brlt	.+92     	; 0x1c4 <is_prime+0x78>
	{
		if(i % n == 0)
 168:	d7 01       	movw	r26, r14
 16a:	c6 01       	movw	r24, r12
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	99 27       	eor	r25, r25
 170:	aa 27       	eor	r26, r26
 172:	b0 78       	andi	r27, 0x80	; 128
 174:	bb 23       	and	r27, r27
 176:	54 f4       	brge	.+20     	; 0x18c <is_prime+0x40>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	a1 09       	sbc	r26, r1
 17c:	b1 09       	sbc	r27, r1
 17e:	8e 6f       	ori	r24, 0xFE	; 254
 180:	9f 6f       	ori	r25, 0xFF	; 255
 182:	af 6f       	ori	r26, 0xFF	; 255
 184:	bf 6f       	ori	r27, 0xFF	; 255
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a1 1d       	adc	r26, r1
 18a:	b1 1d       	adc	r27, r1
 18c:	89 2b       	or	r24, r25
 18e:	8a 2b       	or	r24, r26
 190:	8b 2b       	or	r24, r27
 192:	d1 f0       	breq	.+52     	; 0x1c8 <is_prime+0x7c>
 194:	c2 e0       	ldi	r28, 0x02	; 2
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	08 c0       	rjmp	.+16     	; 0x1aa <is_prime+0x5e>
 19a:	c7 01       	movw	r24, r14
 19c:	b6 01       	movw	r22, r12
 19e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 1a2:	67 2b       	or	r22, r23
 1a4:	68 2b       	or	r22, r24
 1a6:	69 2b       	or	r22, r25
 1a8:	89 f0       	breq	.+34     	; 0x1cc <is_prime+0x80>

//Calculates the prime.
bool is_prime(long i)
{
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	9e 01       	movw	r18, r28
 1ae:	0d 2e       	mov	r0, r29
 1b0:	00 0c       	add	r0, r0
 1b2:	44 0b       	sbc	r20, r20
 1b4:	55 0b       	sbc	r21, r21
 1b6:	2c 15       	cp	r18, r12
 1b8:	3d 05       	cpc	r19, r13
 1ba:	4e 05       	cpc	r20, r14
 1bc:	5f 05       	cpc	r21, r15
 1be:	6c f3       	brlt	.-38     	; 0x19a <is_prime+0x4e>
		{
			return false;
		}
		
	}
	return true;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <is_prime+0x82>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <is_prime+0x82>
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
	{
		if(i % n == 0)
		{
			return false;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <is_prime+0x82>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return true;
	
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <printAt>:

void printAt(long num, int pos) {
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	4b 01       	movw	r8, r22
 1f2:	5c 01       	movw	r10, r24
 1f4:	ea 01       	movw	r28, r20
	//lock the mutex
	lock(&mutexPrime);
 1f6:	88 e1       	ldi	r24, 0x18	; 24
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lock>
	pp = pos;
 1fe:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 202:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
	writeChar( (num % 100) / 10 + '0', pp);
 206:	c5 01       	movw	r24, r10
 208:	b4 01       	movw	r22, r8
 20a:	24 e6       	ldi	r18, 0x64	; 100
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 216:	0f 2e       	mov	r0, r31
 218:	fa e0       	ldi	r31, 0x0A	; 10
 21a:	cf 2e       	mov	r12, r31
 21c:	d1 2c       	mov	r13, r1
 21e:	e1 2c       	mov	r14, r1
 220:	f1 2c       	mov	r15, r1
 222:	f0 2d       	mov	r31, r0
 224:	a7 01       	movw	r20, r14
 226:	96 01       	movw	r18, r12
 228:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 22c:	be 01       	movw	r22, r28
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	82 0f       	add	r24, r18
 232:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pp++;
 236:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <pp>
 23a:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <pp+0x1>
 23e:	21 96       	adiw	r28, 0x01	; 1
 240:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 244:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
	writeChar( num % 10 + '0', pp);
 248:	c5 01       	movw	r24, r10
 24a:	b4 01       	movw	r22, r8
 24c:	a7 01       	movw	r20, r14
 24e:	96 01       	movw	r18, r12
 250:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__divmodsi4>
 254:	86 2f       	mov	r24, r22
 256:	be 01       	movw	r22, r28
 258:	80 5d       	subi	r24, 0xD0	; 208
 25a:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	//Unlock the mutex
	unlock(&mutexPrime);
 25e:	88 e1       	ldi	r24, 0x18	; 24
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <unlock>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	08 95       	ret

0000027c <computePrimes>:

//Counts the primes.
void computePrimes(int pos) {
 27c:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 27e:	c1 2c       	mov	r12, r1
 280:	d1 2c       	mov	r13, r1
 282:	76 01       	movw	r14, r12
 284:	c3 94       	inc	r12
		if (is_prime(n)) {
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	0e 94 a6 00 	call	0x14c	; 0x14c <is_prime>
 28e:	88 23       	and	r24, r24
 290:	29 f0       	breq	.+10     	; 0x29c <computePrimes+0x20>
			printAt(n, pos);
 292:	ae 01       	movw	r20, r28
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	0e 94 ee 00 	call	0x1dc	; 0x1dc <printAt>

//Counts the primes.
void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	c8 1a       	sub	r12, r24
 2a0:	d8 0a       	sbc	r13, r24
 2a2:	e8 0a       	sbc	r14, r24
 2a4:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
//			yield();
		}
	}
 2a6:	ef cf       	rjmp	.-34     	; 0x286 <computePrimes+0xa>

000002a8 <main>:
}

int main() {
	
	CLKPR = 0x80;
 2a8:	e1 e6       	ldi	r30, 0x61	; 97
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2b0:	10 82       	st	Z, r1
	
	LCDInit();
 2b2:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
	spawn(computePrimes, 0);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	8e e3       	ldi	r24, 0x3E	; 62
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	0e 94 9c 01 	call	0x338	; 0x338 <spawn>
	computePrimes(3);
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 3e 01 	call	0x27c	; 0x27c <computePrimes>

000002ca <enqueue>:

    initialized = 1;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 2ca:	dc 01       	movw	r26, r24
 2cc:	15 96       	adiw	r26, 0x05	; 5
 2ce:	1c 92       	st	X, r1
 2d0:	1e 92       	st	-X, r1
 2d2:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 2d4:	db 01       	movw	r26, r22
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	30 97       	sbiw	r30, 0x00	; 0
 2de:	21 f4       	brne	.+8      	; 0x2e8 <enqueue+0x1e>
        *queue = p;
 2e0:	8d 93       	st	X+, r24
 2e2:	9c 93       	st	X, r25
 2e4:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 2e6:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 2e8:	24 81       	ldd	r18, Z+4	; 0x04
 2ea:	35 81       	ldd	r19, Z+5	; 0x05
 2ec:	21 15       	cp	r18, r1
 2ee:	31 05       	cpc	r19, r1
 2f0:	d1 f7       	brne	.-12     	; 0x2e6 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 2f2:	95 83       	std	Z+5, r25	; 0x05
 2f4:	84 83       	std	Z+4, r24	; 0x04
 2f6:	08 95       	ret

000002f8 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <dispatch+0x6>
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	9a 83       	std	Y+2, r25	; 0x02
 304:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 30a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 30e:	06 96       	adiw	r24, 0x06	; 6
 310:	0e 94 29 03 	call	0x652	; 0x652 <setjmp>
 314:	89 2b       	or	r24, r25
 316:	59 f4       	brne	.+22     	; 0x32e <dispatch+0x36>
        current = next;
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 320:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	06 96       	adiw	r24, 0x06	; 6
 32a:	0e 94 49 03 	call	0x692	; 0x692 <longjmp>
    }
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <spawn>:

void spawn(void (* function)(int), int arg) {
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <spawn+0x6>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 342:	f8 94       	cli
    if (!initialized) initialize();
 344:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 348:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 34c:	23 2b       	or	r18, r19
 34e:	a1 f5       	brne	.+104    	; 0x3b8 <spawn+0x80>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 350:	2c ef       	ldi	r18, 0xFC	; 252
 352:	31 e0       	ldi	r19, 0x01	; 1
 354:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 358:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 35c:	29 e6       	ldi	r18, 0x69	; 105
 35e:	32 e0       	ldi	r19, 0x02	; 2
 360:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 364:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 368:	26 ed       	ldi	r18, 0xD6	; 214
 36a:	32 e0       	ldi	r19, 0x02	; 2
 36c:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 370:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 374:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 378:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>
	
	//Button settings.
	
	//Activate the button
	PORTB = 0x80;
 37c:	20 e8       	ldi	r18, 0x80	; 128
 37e:	25 b9       	out	0x05, r18	; 5
	
	//Enabel Interrupt Enabel 1 on the PCIE1
	EIMSK = (1 << PCIE1);
 380:	2d bb       	out	0x1d, r18	; 29
	PCMSK1 = (1 << PCINT15);
 382:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	
	// The clock settings. 
	
	//OC1A is set high on compare match.
	TCCR1A = (1 << COM1A0) | (1 << COM1A1);
 386:	20 ec       	ldi	r18, 0xC0	; 192
 388:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	
	// Set timer to CTC and prescale Factor on 1024.
	TCCR1B = (1 << WGM12) | (1 << CS10) |(1 << CS12);
 38c:	2d e0       	ldi	r18, 0x0D	; 13
 38e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	// Set Value to around 50ms. 8000000/20480 = 390.625
	OCR1A = 391;
 392:	27 e8       	ldi	r18, 0x87	; 135
 394:	31 e0       	ldi	r19, 0x01	; 1
 396:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 39a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	//clearing the TCNT1 register during initialization.
	TCNT1 = 0x0;
 39e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	//Compare a match interrupt Enable.
	TIMSK1 = (1 << OCIE1A);
 3a6:	22 e0       	ldi	r18, 0x02	; 2
 3a8:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	



    initialized = 1;
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 3b4:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3c0:	3a 83       	std	Y+2, r19	; 0x02
 3c2:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3c4:	23 2b       	or	r18, r19
 3c6:	a9 f0       	breq	.+42     	; 0x3f2 <spawn+0xba>
        *queue = (*queue)->next;
 3c8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ca:	fa 81       	ldd	r31, Y+2	; 0x02
 3cc:	44 81       	ldd	r20, Z+4	; 0x04
 3ce:	55 81       	ldd	r21, Z+5	; 0x05
 3d0:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 3d4:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3d8:	91 83       	std	Z+1, r25	; 0x01
 3da:	80 83       	st	Z, r24
    newp->arg = arg;
 3dc:	73 83       	std	Z+3, r23	; 0x03
 3de:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 3e0:	15 82       	std	Z+5, r1	; 0x05
 3e2:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 3e4:	cf 01       	movw	r24, r30
 3e6:	06 96       	adiw	r24, 0x06	; 6
 3e8:	0e 94 29 03 	call	0x652	; 0x652 <setjmp>
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	49 f5       	brne	.+82     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <spawn+0xbc>
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <spawn+0xba>
        ENABLE();
 3f4:	78 94       	sei
        current->function(current->arg);
 3f6:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 3fa:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 3fe:	ed 91       	ld	r30, X+
 400:	fc 91       	ld	r31, X
 402:	11 97       	sbiw	r26, 0x01	; 1
 404:	12 96       	adiw	r26, 0x02	; 2
 406:	8d 91       	ld	r24, X+
 408:	9c 91       	ld	r25, X
 40a:	13 97       	sbiw	r26, 0x03	; 3
 40c:	09 95       	icall
        DISABLE();
 40e:	f8 94       	cli
        enqueue(current, &freeQ);
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	71 e0       	ldi	r23, 0x01	; 1
 414:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 418:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 41c:	0e 94 65 01 	call	0x2ca	; 0x2ca <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 420:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 424:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	51 f0       	breq	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        *queue = (*queue)->next;
 42c:	fc 01       	movw	r30, r24
 42e:	24 81       	ldd	r18, Z+4	; 0x04
 430:	35 81       	ldd	r19, Z+5	; 0x05
 432:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 436:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 43a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <dispatch>
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	ff cf       	rjmp	.-2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    }
    SETSTACK(&newp->context, &newp->stack);
 442:	e9 81       	ldd	r30, Y+1	; 0x01
 444:	fa 81       	ldd	r31, Y+2	; 0x02
 446:	36 96       	adiw	r30, 0x06	; 6
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	87 59       	subi	r24, 0x97	; 151
 44e:	9f 4f       	sbci	r25, 0xFF	; 255
 450:	91 8b       	std	Z+17, r25	; 0x11
 452:	80 8b       	std	Z+16, r24	; 0x10
 454:	93 8b       	std	Z+19, r25	; 0x13
 456:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 458:	6e e1       	ldi	r22, 0x1E	; 30
 45a:	71 e0       	ldi	r23, 0x01	; 1
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	0e 94 65 01 	call	0x2ca	; 0x2ca <enqueue>
    ENABLE();
 464:	78 94       	sei
}
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <yield>:

void yield(void) {
	ENABLE();
 470:	78 94       	sei
	enqueue(current, &readyQ);
 472:	6e e1       	ldi	r22, 0x1E	; 30
 474:	71 e0       	ldi	r23, 0x01	; 1
 476:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 47a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 47e:	0e 94 65 01 	call	0x2ca	; 0x2ca <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 482:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 486:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	59 f0       	breq	.+22     	; 0x4a4 <yield+0x34>
        *queue = (*queue)->next;
 48e:	fc 01       	movw	r30, r24
 490:	24 81       	ldd	r18, Z+4	; 0x04
 492:	35 81       	ldd	r19, Z+5	; 0x05
 494:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 498:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
}

void yield(void) {
	ENABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 49c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <dispatch>
	DISABLE();
 4a0:	f8 94       	cli
}
 4a2:	08 95       	ret
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <yield+0x34>

000004a6 <lock>:

void lock(mutex *m) 
{
	DISABLE();
 4a6:	f8 94       	cli
	
	//Take the mutex
	if (m->locked == 0)
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 81       	ld	r18, Z
 4ac:	31 81       	ldd	r19, Z+1	; 0x01
 4ae:	23 2b       	or	r18, r19
 4b0:	29 f4       	brne	.+10     	; 0x4bc <lock+0x16>
	{
		m->locked = 1;
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	31 83       	std	Z+1, r19	; 0x01
 4b8:	20 83       	st	Z, r18
 4ba:	1a c0       	rjmp	.+52     	; 0x4f0 <lock+0x4a>
	}
	//Wait if it is already locked.
	else
	{
		enqueue(current, &(m->waitQ));
 4bc:	bc 01       	movw	r22, r24
 4be:	6e 5f       	subi	r22, 0xFE	; 254
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4ca:	0e 94 65 01 	call	0x2ca	; 0x2ca <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ce:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 4d2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	51 f0       	breq	.+20     	; 0x4ee <lock+0x48>
        *queue = (*queue)->next;
 4da:	fc 01       	movw	r30, r24
 4dc:	24 81       	ldd	r18, Z+4	; 0x04
 4de:	35 81       	ldd	r19, Z+5	; 0x05
 4e0:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 4e4:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
	}
	//Wait if it is already locked.
	else
	{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 4e8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <dispatch>
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <lock+0x4a>
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <lock+0x48>
	}
	ENABLE();
 4f0:	78 94       	sei
 4f2:	08 95       	ret

000004f4 <unlock>:

}

void unlock(mutex *m) 
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	DISABLE();
 4f8:	f8 94       	cli
	
	
	//Check it it is non empty.
	if (m->waitQ != NULL) 
 4fa:	fc 01       	movw	r30, r24
 4fc:	22 81       	ldd	r18, Z+2	; 0x02
 4fe:	33 81       	ldd	r19, Z+3	; 0x03
 500:	23 2b       	or	r18, r19
 502:	b1 f0       	breq	.+44     	; 0x530 <__stack+0x31>
 504:	ec 01       	movw	r28, r24
	{
		enqueue(current, &readyQ);
 506:	6e e1       	ldi	r22, 0x1E	; 30
 508:	71 e0       	ldi	r23, 0x01	; 1
 50a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 50e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 512:	0e 94 65 01 	call	0x2ca	; 0x2ca <enqueue>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 516:	8a 81       	ldd	r24, Y+2	; 0x02
 518:	9b 81       	ldd	r25, Y+3	; 0x03
    if (*queue) {
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	41 f0       	breq	.+16     	; 0x52e <__stack+0x2f>
        *queue = (*queue)->next;
 51e:	fc 01       	movw	r30, r24
 520:	24 81       	ldd	r18, Z+4	; 0x04
 522:	35 81       	ldd	r19, Z+5	; 0x05
 524:	3b 83       	std	Y+3, r19	; 0x03
 526:	2a 83       	std	Y+2, r18	; 0x02
	
	//Check it it is non empty.
	if (m->waitQ != NULL) 
	{
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 528:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <dispatch>
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__stack+0x37>
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stack+0x2f>
	} 
	//Realese the mutex.
	else
	{
		m->locked = 0;
 530:	fc 01       	movw	r30, r24
 532:	11 82       	std	Z+1, r1	; 0x01
 534:	10 82       	st	Z, r1
	}
	
	ENABLE();
 536:	78 94       	sei
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <__vector_3>:

//Macro for listening for the button.
ISR(PCINT1_vect) 
{
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
	if (PINB >> 7 == 0) 
 560:	1f 9b       	sbis	0x03, 7	; 3
	{
		yield();
 562:	0e 94 38 02 	call	0x470	; 0x470 <yield>
	}
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_7>:

//Macro for listening for the clock.
ISR(TIMER1_COMPA_vect) 
{
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	yield();
 5aa:	0e 94 38 02 	call	0x470	; 0x470 <yield>
 5ae:	ff 91       	pop	r31
 5b0:	ef 91       	pop	r30
 5b2:	bf 91       	pop	r27
 5b4:	af 91       	pop	r26
 5b6:	9f 91       	pop	r25
 5b8:	8f 91       	pop	r24
 5ba:	7f 91       	pop	r23
 5bc:	6f 91       	pop	r22
 5be:	5f 91       	pop	r21
 5c0:	4f 91       	pop	r20
 5c2:	3f 91       	pop	r19
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__divmodsi4>:
 5d0:	05 2e       	mov	r0, r21
 5d2:	97 fb       	bst	r25, 7
 5d4:	1e f4       	brtc	.+6      	; 0x5dc <__divmodsi4+0xc>
 5d6:	00 94       	com	r0
 5d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__negsi2>
 5dc:	57 fd       	sbrc	r21, 7
 5de:	07 d0       	rcall	.+14     	; 0x5ee <__divmodsi4_neg2>
 5e0:	0e 94 07 03 	call	0x60e	; 0x60e <__udivmodsi4>
 5e4:	07 fc       	sbrc	r0, 7
 5e6:	03 d0       	rcall	.+6      	; 0x5ee <__divmodsi4_neg2>
 5e8:	4e f4       	brtc	.+18     	; 0x5fc <__divmodsi4_exit>
 5ea:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__negsi2>

000005ee <__divmodsi4_neg2>:
 5ee:	50 95       	com	r21
 5f0:	40 95       	com	r20
 5f2:	30 95       	com	r19
 5f4:	21 95       	neg	r18
 5f6:	3f 4f       	sbci	r19, 0xFF	; 255
 5f8:	4f 4f       	sbci	r20, 0xFF	; 255
 5fa:	5f 4f       	sbci	r21, 0xFF	; 255

000005fc <__divmodsi4_exit>:
 5fc:	08 95       	ret

000005fe <__negsi2>:
 5fe:	90 95       	com	r25
 600:	80 95       	com	r24
 602:	70 95       	com	r23
 604:	61 95       	neg	r22
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	8f 4f       	sbci	r24, 0xFF	; 255
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	08 95       	ret

0000060e <__udivmodsi4>:
 60e:	a1 e2       	ldi	r26, 0x21	; 33
 610:	1a 2e       	mov	r1, r26
 612:	aa 1b       	sub	r26, r26
 614:	bb 1b       	sub	r27, r27
 616:	fd 01       	movw	r30, r26
 618:	0d c0       	rjmp	.+26     	; 0x634 <__udivmodsi4_ep>

0000061a <__udivmodsi4_loop>:
 61a:	aa 1f       	adc	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	ee 1f       	adc	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	a2 17       	cp	r26, r18
 624:	b3 07       	cpc	r27, r19
 626:	e4 07       	cpc	r30, r20
 628:	f5 07       	cpc	r31, r21
 62a:	20 f0       	brcs	.+8      	; 0x634 <__udivmodsi4_ep>
 62c:	a2 1b       	sub	r26, r18
 62e:	b3 0b       	sbc	r27, r19
 630:	e4 0b       	sbc	r30, r20
 632:	f5 0b       	sbc	r31, r21

00000634 <__udivmodsi4_ep>:
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	1a 94       	dec	r1
 63e:	69 f7       	brne	.-38     	; 0x61a <__udivmodsi4_loop>
 640:	60 95       	com	r22
 642:	70 95       	com	r23
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	9b 01       	movw	r18, r22
 64a:	ac 01       	movw	r20, r24
 64c:	bd 01       	movw	r22, r26
 64e:	cf 01       	movw	r24, r30
 650:	08 95       	ret

00000652 <setjmp>:
 652:	dc 01       	movw	r26, r24
 654:	2d 92       	st	X+, r2
 656:	3d 92       	st	X+, r3
 658:	4d 92       	st	X+, r4
 65a:	5d 92       	st	X+, r5
 65c:	6d 92       	st	X+, r6
 65e:	7d 92       	st	X+, r7
 660:	8d 92       	st	X+, r8
 662:	9d 92       	st	X+, r9
 664:	ad 92       	st	X+, r10
 666:	bd 92       	st	X+, r11
 668:	cd 92       	st	X+, r12
 66a:	dd 92       	st	X+, r13
 66c:	ed 92       	st	X+, r14
 66e:	fd 92       	st	X+, r15
 670:	0d 93       	st	X+, r16
 672:	1d 93       	st	X+, r17
 674:	cd 93       	st	X+, r28
 676:	dd 93       	st	X+, r29
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	8d b7       	in	r24, 0x3d	; 61
 67e:	8d 93       	st	X+, r24
 680:	8e b7       	in	r24, 0x3e	; 62
 682:	8d 93       	st	X+, r24
 684:	8f b7       	in	r24, 0x3f	; 63
 686:	8d 93       	st	X+, r24
 688:	ed 93       	st	X+, r30
 68a:	fd 93       	st	X+, r31
 68c:	88 27       	eor	r24, r24
 68e:	99 27       	eor	r25, r25
 690:	09 94       	ijmp

00000692 <longjmp>:
 692:	dc 01       	movw	r26, r24
 694:	cb 01       	movw	r24, r22
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	91 05       	cpc	r25, r1
 69a:	81 1d       	adc	r24, r1
 69c:	2d 90       	ld	r2, X+
 69e:	3d 90       	ld	r3, X+
 6a0:	4d 90       	ld	r4, X+
 6a2:	5d 90       	ld	r5, X+
 6a4:	6d 90       	ld	r6, X+
 6a6:	7d 90       	ld	r7, X+
 6a8:	8d 90       	ld	r8, X+
 6aa:	9d 90       	ld	r9, X+
 6ac:	ad 90       	ld	r10, X+
 6ae:	bd 90       	ld	r11, X+
 6b0:	cd 90       	ld	r12, X+
 6b2:	dd 90       	ld	r13, X+
 6b4:	ed 90       	ld	r14, X+
 6b6:	fd 90       	ld	r15, X+
 6b8:	0d 91       	ld	r16, X+
 6ba:	1d 91       	ld	r17, X+
 6bc:	cd 91       	ld	r28, X+
 6be:	dd 91       	ld	r29, X+
 6c0:	ed 91       	ld	r30, X+
 6c2:	fd 91       	ld	r31, X+
 6c4:	0d 90       	ld	r0, X+
 6c6:	f8 94       	cli
 6c8:	fe bf       	out	0x3e, r31	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	ed bf       	out	0x3d, r30	; 61
 6ce:	ed 91       	ld	r30, X+
 6d0:	fd 91       	ld	r31, X+
 6d2:	09 94       	ijmp

000006d4 <_exit>:
 6d4:	f8 94       	cli

000006d6 <__stop_program>:
 6d6:	ff cf       	rjmp	.-2      	; 0x6d6 <__stop_program>
