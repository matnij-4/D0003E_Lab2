
D0003E_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000606  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800118  00800118  000006b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ff0  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad7  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  0000228b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c6  00000000  00000000  00002f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e0       	ldi	r30, 0x06	; 6
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ad 33       	cpi	r26, 0x3D	; 61
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  92:	0c 94 01 03 	jmp	0x602	; 0x602 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCDInit>:


void LCDInit(void) {
	
	//Set Lowpower Waveform, no frame interrupt, no blanking. LCD Enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  9a:	80 ec       	ldi	r24, 0xC0	; 192
  9c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	//drive time 300 microseconds, contrast control voltage 3.35 V.
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	//external asynchronous clock source, 1/3 bias, 1/4 duty cycle, 25 segments.
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
  a6:	87 eb       	ldi	r24, 0xB7	; 183
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//prescaler setting N=16, clock divider setting D=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  b2:	08 95       	ret

000000b4 <writeChar>:

}

void writeChar(char ch, int pos)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	64 97       	sbiw	r28, 0x14	; 20
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	uint8_t *lcdaddr = (uint8_t *) 0xec;	//The Address to the first position on the LCD.
	uint8_t mask;							//Mask to get only the nibble of a value.
	uint8_t nibbleNumber = 0x0;				//Nibble the number that is sent to the LCD.
	
	//SCC Table with the numbers from 0 to 9.
	uint16_t sccTable[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  c8:	94 e1       	ldi	r25, 0x14	; 20
  ca:	e4 e0       	ldi	r30, 0x04	; 4
  cc:	f1 e0       	ldi	r31, 0x01	; 1
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	9a 95       	dec	r25
  d8:	e1 f7       	brne	.-8      	; 0xd2 <writeChar+0x1e>
	
	// Check if position is outside or not.
	if (pos < 0 || pos > 5) {
  da:	66 30       	cpi	r22, 0x06	; 6
  dc:	71 05       	cpc	r23, r1
  de:	68 f5       	brcc	.+90     	; 0x13a <writeChar+0x86>
	uint16_t number = 0x0;	// The number to print.
	
	// Check if it is a 0 to 9.
	if (ch >= '0' || ch <= '9')
	{
		number = sccTable[ch - '0'];	//Get the number out of the array.
  e0:	e8 2f       	mov	r30, r24
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	f0 97       	sbiw	r30, 0x30	; 48
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	21 81       	ldd	r18, Z+1	; 0x01
  f0:	32 81       	ldd	r19, Z+2	; 0x02
	}
	
	lcdaddr += pos >> 1;	//Point to the right position. Divide by 2 you can say.
  f2:	fb 01       	movw	r30, r22
  f4:	f5 95       	asr	r31
  f6:	e7 95       	ror	r30
  f8:	e4 51       	subi	r30, 0x14	; 20
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
	
	//Check if it is odd or even position.
	if (pos % 2 == 0)
  fc:	db 01       	movw	r26, r22
  fe:	a1 70       	andi	r26, 0x01	; 1
 100:	bb 27       	eor	r27, r27
 102:	60 ff       	sbrs	r22, 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <writeChar+0x56>
	{
		mask = 0xf0;
	}
	else
	{
		mask = 0x0f;
 106:	6f e0       	ldi	r22, 0x0F	; 15
 108:	01 c0       	rjmp	.+2      	; 0x10c <writeChar+0x58>
	lcdaddr += pos >> 1;	//Point to the right position. Divide by 2 you can say.
	
	//Check if it is odd or even position.
	if (pos % 2 == 0)
	{
		mask = 0xf0;
 10a:	60 ef       	ldi	r22, 0xF0	; 240
 10c:	af 01       	movw	r20, r30
 10e:	4c 5e       	subi	r20, 0xEC	; 236
 110:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//Will place out the nibbles on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
	{
		//Masking the smallest byte.
		nibbleNumber = number & 0xf;
 112:	82 2f       	mov	r24, r18
 114:	8f 70       	andi	r24, 0x0F	; 15
		number = number >> 4;
 116:	32 95       	swap	r19
 118:	22 95       	swap	r18
 11a:	2f 70       	andi	r18, 0x0F	; 15
 11c:	23 27       	eor	r18, r19
 11e:	3f 70       	andi	r19, 0x0F	; 15
 120:	23 27       	eor	r18, r19
		
		if(pos % 2 != 0)	//Check position.
 122:	10 97       	sbiw	r26, 0x00	; 0
 124:	11 f0       	breq	.+4      	; 0x12a <writeChar+0x76>
		{
			nibbleNumber = nibbleNumber << 4;	//Shift the nibble to the right pos.
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
		}
		
		*lcdaddr = (*lcdaddr & mask) | nibbleNumber;	//Send the nibble.
 12a:	90 81       	ld	r25, Z
 12c:	96 23       	and	r25, r22
 12e:	89 2b       	or	r24, r25
 130:	80 83       	st	Z, r24
		lcdaddr += 5;
 132:	35 96       	adiw	r30, 0x05	; 5
	{
		mask = 0x0f;
	}
	
	//Will place out the nibbles on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
 134:	4e 17       	cp	r20, r30
 136:	5f 07       	cpc	r21, r31
 138:	61 f7       	brne	.-40     	; 0x112 <writeChar+0x5e>
		}
		
		*lcdaddr = (*lcdaddr & mask) | nibbleNumber;	//Send the nibble.
		lcdaddr += 5;
	}
}
 13a:	64 96       	adiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <is_prime>:

bool is_prime(long i)
{
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	6b 01       	movw	r12, r22
 15a:	7c 01       	movw	r14, r24
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	c8 16       	cp	r12, r24
 160:	d1 04       	cpc	r13, r1
 162:	e1 04       	cpc	r14, r1
 164:	f1 04       	cpc	r15, r1
 166:	74 f1       	brlt	.+92     	; 0x1c4 <is_prime+0x78>
	{
		if(i % n == 0)
 168:	d7 01       	movw	r26, r14
 16a:	c6 01       	movw	r24, r12
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	99 27       	eor	r25, r25
 170:	aa 27       	eor	r26, r26
 172:	b0 78       	andi	r27, 0x80	; 128
 174:	bb 23       	and	r27, r27
 176:	54 f4       	brge	.+20     	; 0x18c <is_prime+0x40>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	a1 09       	sbc	r26, r1
 17c:	b1 09       	sbc	r27, r1
 17e:	8e 6f       	ori	r24, 0xFE	; 254
 180:	9f 6f       	ori	r25, 0xFF	; 255
 182:	af 6f       	ori	r26, 0xFF	; 255
 184:	bf 6f       	ori	r27, 0xFF	; 255
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a1 1d       	adc	r26, r1
 18a:	b1 1d       	adc	r27, r1
 18c:	89 2b       	or	r24, r25
 18e:	8a 2b       	or	r24, r26
 190:	8b 2b       	or	r24, r27
 192:	d1 f0       	breq	.+52     	; 0x1c8 <is_prime+0x7c>
 194:	c2 e0       	ldi	r28, 0x02	; 2
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	08 c0       	rjmp	.+16     	; 0x1aa <is_prime+0x5e>
 19a:	c7 01       	movw	r24, r14
 19c:	b6 01       	movw	r22, r12
 19e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodsi4>
 1a2:	67 2b       	or	r22, r23
 1a4:	68 2b       	or	r22, r24
 1a6:	69 2b       	or	r22, r25
 1a8:	89 f0       	breq	.+34     	; 0x1cc <is_prime+0x80>
}

bool is_prime(long i)
{
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	9e 01       	movw	r18, r28
 1ae:	0d 2e       	mov	r0, r29
 1b0:	00 0c       	add	r0, r0
 1b2:	44 0b       	sbc	r20, r20
 1b4:	55 0b       	sbc	r21, r21
 1b6:	2c 15       	cp	r18, r12
 1b8:	3d 05       	cpc	r19, r13
 1ba:	4e 05       	cpc	r20, r14
 1bc:	5f 05       	cpc	r21, r15
 1be:	6c f3       	brlt	.-38     	; 0x19a <is_prime+0x4e>
		{
			return false;
		}
		
	}
	return true;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <is_prime+0x82>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <is_prime+0x82>
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
	{
		if(i % n == 0)
		{
			return false;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <is_prime+0x82>
 1cc:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return true;
	
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <printAt>:

void printAt(long num, int pos) {
 1dc:	8f 92       	push	r8
 1de:	9f 92       	push	r9
 1e0:	af 92       	push	r10
 1e2:	bf 92       	push	r11
 1e4:	cf 92       	push	r12
 1e6:	df 92       	push	r13
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	4b 01       	movw	r8, r22
 1f2:	5c 01       	movw	r10, r24
 1f4:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 1f6:	24 e6       	ldi	r18, 0x64	; 100
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodsi4>
 202:	0f 2e       	mov	r0, r31
 204:	fa e0       	ldi	r31, 0x0A	; 10
 206:	cf 2e       	mov	r12, r31
 208:	d1 2c       	mov	r13, r1
 20a:	e1 2c       	mov	r14, r1
 20c:	f1 2c       	mov	r15, r1
 20e:	f0 2d       	mov	r31, r0
 210:	a7 01       	movw	r20, r14
 212:	96 01       	movw	r18, r12
 214:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodsi4>
 218:	be 01       	movw	r22, r28
 21a:	80 e3       	ldi	r24, 0x30	; 48
 21c:	82 0f       	add	r24, r18
 21e:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 222:	21 96       	adiw	r28, 0x01	; 1
 224:	c5 01       	movw	r24, r10
 226:	b4 01       	movw	r22, r8
 228:	a7 01       	movw	r20, r14
 22a:	96 01       	movw	r18, r12
 22c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodsi4>
 230:	86 2f       	mov	r24, r22
 232:	be 01       	movw	r22, r28
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	0e 94 5a 00 	call	0xb4	; 0xb4 <writeChar>
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	bf 90       	pop	r11
 248:	af 90       	pop	r10
 24a:	9f 90       	pop	r9
 24c:	8f 90       	pop	r8
 24e:	08 95       	ret

00000250 <computePrimes>:

void computePrimes(int pos) {
 250:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 252:	c1 2c       	mov	r12, r1
 254:	d1 2c       	mov	r13, r1
 256:	76 01       	movw	r14, r12
 258:	c3 94       	inc	r12
		if (is_prime(n)) {
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	0e 94 a6 00 	call	0x14c	; 0x14c <is_prime>
 262:	88 23       	and	r24, r24
 264:	29 f0       	breq	.+10     	; 0x270 <computePrimes+0x20>
			printAt(n, pos);
 266:	ae 01       	movw	r20, r28
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <printAt>
}

void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	c8 1a       	sub	r12, r24
 274:	d8 0a       	sbc	r13, r24
 276:	e8 0a       	sbc	r14, r24
 278:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
//			yield();
		}
	}
 27a:	ef cf       	rjmp	.-34     	; 0x25a <computePrimes+0xa>

0000027c <main>:
}

int main() {
	LCDInit();
 27c:	0e 94 4d 00 	call	0x9a	; 0x9a <LCDInit>
	spawn(computePrimes, 0);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	88 e2       	ldi	r24, 0x28	; 40
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 81 01 	call	0x302	; 0x302 <spawn>
	computePrimes(3);
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 28 01 	call	0x250	; 0x250 <computePrimes>

00000294 <enqueue>:

void lock(mutex *m) {

}

void unlock(mutex *m) {
 294:	dc 01       	movw	r26, r24
 296:	15 96       	adiw	r26, 0x05	; 5
 298:	1c 92       	st	X, r1
 29a:	1e 92       	st	-X, r1
 29c:	14 97       	sbiw	r26, 0x04	; 4
 29e:	db 01       	movw	r26, r22
 2a0:	ed 91       	ld	r30, X+
 2a2:	fc 91       	ld	r31, X
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	30 97       	sbiw	r30, 0x00	; 0
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <enqueue+0x1e>
 2aa:	8d 93       	st	X+, r24
 2ac:	9c 93       	st	X, r25
 2ae:	08 95       	ret
 2b0:	f9 01       	movw	r30, r18
 2b2:	24 81       	ldd	r18, Z+4	; 0x04
 2b4:	35 81       	ldd	r19, Z+5	; 0x05
 2b6:	21 15       	cp	r18, r1
 2b8:	31 05       	cpc	r19, r1
 2ba:	d1 f7       	brne	.-12     	; 0x2b0 <enqueue+0x1c>
 2bc:	95 83       	std	Z+5, r25	; 0x05
 2be:	84 83       	std	Z+4, r24	; 0x04
 2c0:	08 95       	ret

000002c2 <dispatch>:
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <dispatch+0x6>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d8:	06 96       	adiw	r24, 0x06	; 6
 2da:	0e 94 c0 02 	call	0x580	; 0x580 <setjmp>
 2de:	89 2b       	or	r24, r25
 2e0:	59 f4       	brne	.+22     	; 0x2f8 <dispatch+0x36>
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	9a 81       	ldd	r25, Y+2	; 0x02
 2e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	06 96       	adiw	r24, 0x06	; 6
 2f4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <longjmp>
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <spawn>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	00 d0       	rcall	.+0      	; 0x308 <spawn+0x6>
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	f8 94       	cli
 30e:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 312:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 316:	23 2b       	or	r18, r19
 318:	a1 f5       	brne	.+104    	; 0x382 <spawn+0x80>
 31a:	26 ef       	ldi	r18, 0xF6	; 246
 31c:	31 e0       	ldi	r19, 0x01	; 1
 31e:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <threads+0x5>
 322:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <threads+0x4>
 326:	23 e6       	ldi	r18, 0x63	; 99
 328:	32 e0       	ldi	r19, 0x02	; 2
 32a:	30 93 fb 01 	sts	0x01FB, r19	; 0x8001fb <threads+0x72>
 32e:	20 93 fa 01 	sts	0x01FA, r18	; 0x8001fa <threads+0x71>
 332:	20 ed       	ldi	r18, 0xD0	; 208
 334:	32 e0       	ldi	r19, 0x02	; 2
 336:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <threads+0xdf>
 33a:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <threads+0xde>
 33e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <threads+0x14c>
 342:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <threads+0x14b>
 346:	20 e8       	ldi	r18, 0x80	; 128
 348:	25 b9       	out	0x05, r18	; 5
 34a:	2d bb       	out	0x1d, r18	; 29
 34c:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 350:	20 ec       	ldi	r18, 0xC0	; 192
 352:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 356:	2d e0       	ldi	r18, 0x0D	; 13
 358:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 35c:	27 e8       	ldi	r18, 0x87	; 135
 35e:	31 e0       	ldi	r19, 0x01	; 1
 360:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 364:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 368:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 36c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 370:	22 e0       	ldi	r18, 0x02	; 2
 372:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0x1>
 37e:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
 382:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 386:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 38a:	3a 83       	std	Y+2, r19	; 0x02
 38c:	29 83       	std	Y+1, r18	; 0x01
 38e:	23 2b       	or	r18, r19
 390:	a9 f0       	breq	.+42     	; 0x3bc <spawn+0xba>
 392:	e9 81       	ldd	r30, Y+1	; 0x01
 394:	fa 81       	ldd	r31, Y+2	; 0x02
 396:	44 81       	ldd	r20, Z+4	; 0x04
 398:	55 81       	ldd	r21, Z+5	; 0x05
 39a:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 39e:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>
 3a2:	91 83       	std	Z+1, r25	; 0x01
 3a4:	80 83       	st	Z, r24
 3a6:	73 83       	std	Z+3, r23	; 0x03
 3a8:	62 83       	std	Z+2, r22	; 0x02
 3aa:	15 82       	std	Z+5, r1	; 0x05
 3ac:	14 82       	std	Z+4, r1	; 0x04
 3ae:	cf 01       	movw	r24, r30
 3b0:	06 96       	adiw	r24, 0x06	; 6
 3b2:	0e 94 c0 02 	call	0x580	; 0x580 <setjmp>
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	49 f5       	brne	.+82     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <spawn+0xbc>
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <spawn+0xba>
 3be:	78 94       	sei
 3c0:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 3c4:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 3c8:	ed 91       	ld	r30, X+
 3ca:	fc 91       	ld	r31, X
 3cc:	11 97       	sbiw	r26, 0x01	; 1
 3ce:	12 96       	adiw	r26, 0x02	; 2
 3d0:	8d 91       	ld	r24, X+
 3d2:	9c 91       	ld	r25, X
 3d4:	13 97       	sbiw	r26, 0x03	; 3
 3d6:	09 95       	icall
 3d8:	f8 94       	cli
 3da:	62 e0       	ldi	r22, 0x02	; 2
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3e6:	0e 94 4a 01 	call	0x294	; 0x294 <enqueue>
 3ea:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 3ee:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	51 f0       	breq	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f6:	fc 01       	movw	r30, r24
 3f8:	24 81       	ldd	r18, Z+4	; 0x04
 3fa:	35 81       	ldd	r19, Z+5	; 0x05
 3fc:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 400:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
 404:	0e 94 61 01 	call	0x2c2	; 0x2c2 <dispatch>
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40c:	e9 81       	ldd	r30, Y+1	; 0x01
 40e:	fa 81       	ldd	r31, Y+2	; 0x02
 410:	36 96       	adiw	r30, 0x06	; 6
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	9a 81       	ldd	r25, Y+2	; 0x02
 416:	87 59       	subi	r24, 0x97	; 151
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	91 8b       	std	Z+17, r25	; 0x11
 41c:	80 8b       	std	Z+16, r24	; 0x10
 41e:	93 8b       	std	Z+19, r25	; 0x13
 420:	82 8b       	std	Z+18, r24	; 0x12
 422:	6a e1       	ldi	r22, 0x1A	; 26
 424:	71 e0       	ldi	r23, 0x01	; 1
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	9a 81       	ldd	r25, Y+2	; 0x02
 42a:	0e 94 4a 01 	call	0x294	; 0x294 <enqueue>
 42e:	78 94       	sei
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <yield>:
 43a:	6a e1       	ldi	r22, 0x1A	; 26
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 442:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 446:	0e 94 4a 01 	call	0x294	; 0x294 <enqueue>
 44a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 44e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	51 f0       	breq	.+20     	; 0x46a <yield+0x30>
 456:	fc 01       	movw	r30, r24
 458:	24 81       	ldd	r18, Z+4	; 0x04
 45a:	35 81       	ldd	r19, Z+5	; 0x05
 45c:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 460:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
 464:	0e 94 61 01 	call	0x2c2	; 0x2c2 <dispatch>
 468:	08 95       	ret
 46a:	ff cf       	rjmp	.-2      	; 0x46a <yield+0x30>

0000046c <__vector_3>:

}


ISR(PCINT1_vect) 
{
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	ef 93       	push	r30
 48c:	ff 93       	push	r31
	if (PINB >> 7 == 0) 
 48e:	1f 9b       	sbis	0x03, 7	; 3
	{
		yield();
 490:	0e 94 1d 02 	call	0x43a	; 0x43a <yield>
	}
}
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_7>:


ISR(TIMER1_COMPA_vect) {
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	yield();
 4d8:	0e 94 1d 02 	call	0x43a	; 0x43a <yield>
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__divmodsi4>:
 4fe:	05 2e       	mov	r0, r21
 500:	97 fb       	bst	r25, 7
 502:	1e f4       	brtc	.+6      	; 0x50a <__stack+0xb>
 504:	00 94       	com	r0
 506:	0e 94 96 02 	call	0x52c	; 0x52c <__negsi2>
 50a:	57 fd       	sbrc	r21, 7
 50c:	07 d0       	rcall	.+14     	; 0x51c <__divmodsi4_neg2>
 50e:	0e 94 9e 02 	call	0x53c	; 0x53c <__udivmodsi4>
 512:	07 fc       	sbrc	r0, 7
 514:	03 d0       	rcall	.+6      	; 0x51c <__divmodsi4_neg2>
 516:	4e f4       	brtc	.+18     	; 0x52a <__divmodsi4_exit>
 518:	0c 94 96 02 	jmp	0x52c	; 0x52c <__negsi2>

0000051c <__divmodsi4_neg2>:
 51c:	50 95       	com	r21
 51e:	40 95       	com	r20
 520:	30 95       	com	r19
 522:	21 95       	neg	r18
 524:	3f 4f       	sbci	r19, 0xFF	; 255
 526:	4f 4f       	sbci	r20, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255

0000052a <__divmodsi4_exit>:
 52a:	08 95       	ret

0000052c <__negsi2>:
 52c:	90 95       	com	r25
 52e:	80 95       	com	r24
 530:	70 95       	com	r23
 532:	61 95       	neg	r22
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	08 95       	ret

0000053c <__udivmodsi4>:
 53c:	a1 e2       	ldi	r26, 0x21	; 33
 53e:	1a 2e       	mov	r1, r26
 540:	aa 1b       	sub	r26, r26
 542:	bb 1b       	sub	r27, r27
 544:	fd 01       	movw	r30, r26
 546:	0d c0       	rjmp	.+26     	; 0x562 <__udivmodsi4_ep>

00000548 <__udivmodsi4_loop>:
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	ee 1f       	adc	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	a2 17       	cp	r26, r18
 552:	b3 07       	cpc	r27, r19
 554:	e4 07       	cpc	r30, r20
 556:	f5 07       	cpc	r31, r21
 558:	20 f0       	brcs	.+8      	; 0x562 <__udivmodsi4_ep>
 55a:	a2 1b       	sub	r26, r18
 55c:	b3 0b       	sbc	r27, r19
 55e:	e4 0b       	sbc	r30, r20
 560:	f5 0b       	sbc	r31, r21

00000562 <__udivmodsi4_ep>:
 562:	66 1f       	adc	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	1a 94       	dec	r1
 56c:	69 f7       	brne	.-38     	; 0x548 <__udivmodsi4_loop>
 56e:	60 95       	com	r22
 570:	70 95       	com	r23
 572:	80 95       	com	r24
 574:	90 95       	com	r25
 576:	9b 01       	movw	r18, r22
 578:	ac 01       	movw	r20, r24
 57a:	bd 01       	movw	r22, r26
 57c:	cf 01       	movw	r24, r30
 57e:	08 95       	ret

00000580 <setjmp>:
 580:	dc 01       	movw	r26, r24
 582:	2d 92       	st	X+, r2
 584:	3d 92       	st	X+, r3
 586:	4d 92       	st	X+, r4
 588:	5d 92       	st	X+, r5
 58a:	6d 92       	st	X+, r6
 58c:	7d 92       	st	X+, r7
 58e:	8d 92       	st	X+, r8
 590:	9d 92       	st	X+, r9
 592:	ad 92       	st	X+, r10
 594:	bd 92       	st	X+, r11
 596:	cd 92       	st	X+, r12
 598:	dd 92       	st	X+, r13
 59a:	ed 92       	st	X+, r14
 59c:	fd 92       	st	X+, r15
 59e:	0d 93       	st	X+, r16
 5a0:	1d 93       	st	X+, r17
 5a2:	cd 93       	st	X+, r28
 5a4:	dd 93       	st	X+, r29
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	8d b7       	in	r24, 0x3d	; 61
 5ac:	8d 93       	st	X+, r24
 5ae:	8e b7       	in	r24, 0x3e	; 62
 5b0:	8d 93       	st	X+, r24
 5b2:	8f b7       	in	r24, 0x3f	; 63
 5b4:	8d 93       	st	X+, r24
 5b6:	ed 93       	st	X+, r30
 5b8:	fd 93       	st	X+, r31
 5ba:	88 27       	eor	r24, r24
 5bc:	99 27       	eor	r25, r25
 5be:	09 94       	ijmp

000005c0 <longjmp>:
 5c0:	dc 01       	movw	r26, r24
 5c2:	cb 01       	movw	r24, r22
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	91 05       	cpc	r25, r1
 5c8:	81 1d       	adc	r24, r1
 5ca:	2d 90       	ld	r2, X+
 5cc:	3d 90       	ld	r3, X+
 5ce:	4d 90       	ld	r4, X+
 5d0:	5d 90       	ld	r5, X+
 5d2:	6d 90       	ld	r6, X+
 5d4:	7d 90       	ld	r7, X+
 5d6:	8d 90       	ld	r8, X+
 5d8:	9d 90       	ld	r9, X+
 5da:	ad 90       	ld	r10, X+
 5dc:	bd 90       	ld	r11, X+
 5de:	cd 90       	ld	r12, X+
 5e0:	dd 90       	ld	r13, X+
 5e2:	ed 90       	ld	r14, X+
 5e4:	fd 90       	ld	r15, X+
 5e6:	0d 91       	ld	r16, X+
 5e8:	1d 91       	ld	r17, X+
 5ea:	cd 91       	ld	r28, X+
 5ec:	dd 91       	ld	r29, X+
 5ee:	ed 91       	ld	r30, X+
 5f0:	fd 91       	ld	r31, X+
 5f2:	0d 90       	ld	r0, X+
 5f4:	f8 94       	cli
 5f6:	fe bf       	out	0x3e, r31	; 62
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	ed bf       	out	0x3d, r30	; 61
 5fc:	ed 91       	ld	r30, X+
 5fe:	fd 91       	ld	r31, X+
 600:	09 94       	ijmp

00000602 <_exit>:
 602:	f8 94       	cli

00000604 <__stop_program>:
 604:	ff cf       	rjmp	.-2      	; 0x604 <__stop_program>
